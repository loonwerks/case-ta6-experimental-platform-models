package CASEAgree
public

    with CASE_Model_Transformations;
    renames CASE_Model_Transformations::all;
    renames Base_Types::all;
    with CMASI;
    renames CMASI::all;
    with Common_Data;
    renames Common_Data::all;

annex agree {**

    -- Message constants
    const OPERATING_REGION_ID_MIN : int = 0;
    const OPERATING_REGION_ID_MAX : int = 500;
    const KEEP_IN_ZONE_ID_MIN : int = 0;
    const KEEP_IN_ZONE_ID_MAX : int = 500;
    const KEEP_OUT_ZONE_ID_MIN : int = 0;
    const KEEP_OUT_ZONE_ID_MAX : int = 500;
    const TASK_ID_MIN : int = 0;
    const TASK_ID_MAX : int = 2000;
    const ENTITY_ID_MIN : int = 0;
    const ENTITY_ID_MAX : int = 500;
    const ALTITUDE_MIN : real = 0.0;
    const ALTITUDE_MAX : real = 15000.0;
    const LATITUDE_MIN : real = -90.0;
    const LATITUDE_MAX : real = 90.0;
    const LONGITUDE_MIN : real = -180.0;
    const LONGITUDE_MAX : real = 180.0;
    const AZIMUTH_CENTERLINE_MIN : real = -180.0;
    const AZIMUTH_CENTERLINE_MAX : real = 180.0;
    const VERTICAL_CENTERLINE_MIN : real = -180.0;
    const VERTICAL_CENTERLINE_MAX : real = 180.0;

    -- UAV maximum climb rate

    const MAX_UAV_CLIMB_RATE : real = 42.0;

    -- Ground Station
    const GS_ID : int = 500;

    -- Flight Controller
    const FCTL_ID : int = 100;

    -- UAV ID
    const UAV_ID : int = 400;

    fun WellformedCASE_RF_Msg(msg : CASE_RF_Msg.Impl, src : int64.i, dst : int64.i ) : bool =
       WellformedCASE_MsgHeader(msg.header, src, dst);

    fun WellformedCASE_MsgHeader(hdr : CASE_MsgHeader.Impl, src : int64.i, dst : int64.i ) : bool =
       (hdr.src = src) and (hdr.dst = dst) and (hdr.trusted = true) and (hdr.HMAC = true);

    fun WellformedCASE_UART_Msg(msg : CASE_UART_Msg.Impl) : bool =
       msg.crc = true;

    fun WELL_FORMED_AUTOMATION_REQUEST(msg : CMASI::AutomationRequest.i) : bool =
        (forall e in msg.EntityList, e >= ENTITY_ID_MIN and e <= ENTITY_ID_MAX) and
        (forall t in msg.TaskList, t >= TASK_ID_MIN and t <= TASK_ID_MAX) and
        msg.OperatingRegion >= OPERATING_REGION_ID_MIN and
        msg.OperatingRegion <= OPERATING_REGION_ID_MAX;

    fun WELL_FORMED_OPERATING_REGION(msg : CMASI::OperatingRegion.i) : bool =
        msg.ID >= OPERATING_REGION_ID_MIN and msg.ID <= OPERATING_REGION_ID_MAX and
        (forall kiz in msg.KeepInAreas, kiz >= KEEP_IN_ZONE_ID_MIN and kiz <= KEEP_IN_ZONE_ID_MAX) and
        (forall koz in msg.KeepOutAreas, koz >= KEEP_OUT_ZONE_ID_MIN and koz <= KEEP_OUT_ZONE_ID_MAX);

    fun WELL_FORMED_LINE_SEARCH_TASK(msg : CMASI::LineSearchTask.i) : bool =
        msg.TaskID >= TASK_ID_MIN and msg.TaskID <= TASK_ID_MAX and
        (forall point in msg.PointList, WELL_FORMED_POINT(point)) and
        (forall viewangle in msg.ViewAngleList, WELL_FORMED_VIEWANGLE(viewangle));

   fun WELL_FORMED_AUTOMATION_RESPONSE(msg : CMASI::AutomationResponse.i) : bool =
        forall cmd in msg.MissionCommandList,
        forall waypoint in cmd.WaypointList,
        WELL_FORMED_WAYPOINT(waypoint);

    fun WELL_FORMED_POINT(point : CMASI::Location3D.i) : bool =
        point.Latitude >= LATITUDE_MIN and point.Latitude <= LATITUDE_MAX and
        point.Longitude >= LONGITUDE_MIN and point.Longitude <= LONGITUDE_MAX and
        point.Altitude >= ALTITUDE_MIN and point.Altitude <= ALTITUDE_MAX;

    fun WELL_FORMED_ZONES(zone : CMASI::Polygon.i) : bool =
        (forall point in zone.BoundaryPointsList, WELL_FORMED_POINT(point));

    fun WELL_FORMED_VIEWANGLE(viewangle : CMASI::Wedge.i) : bool =
        viewangle.AzimuthCenterline >= AZIMUTH_CENTERLINE_MIN and
        viewangle.AzimuthCenterline <= AZIMUTH_CENTERLINE_MAX and
        viewangle.VerticalCenterline >= VERTICAL_CENTERLINE_MIN and
        viewangle.VerticalCenterline <= VERTICAL_CENTERLINE_MAX;

    fun WELL_FORMED_WAYPOINT(point : CMASI::Waypoint.i) : bool =
        point.Latitude >= LATITUDE_MIN and point.Latitude <= LATITUDE_MAX and
        point.Longitude >= LONGITUDE_MIN and point.Longitude <= LONGITUDE_MAX and
        point.Altitude >= ALTITUDE_MIN and point.Altitude <= ALTITUDE_MAX;

    fun GET_MISSION_COMMAND(automationResponse: CMASI::AutomationResponse.i) : CMASI::MissionCommand.i =
        automationResponse.MissionCommandList[0];

    fun WAYPOINTS_IN_ZONE(mission : CMASI::MissionCommand.i, zone : CMASI::Polygon.i) : bool =
        forall waypoint in mission.WaypointList, WAYPOINT_IN_ZONE_RECTANGLE(waypoint, zone);

    fun WAYPOINTS_NOT_IN_ZONE(mission : CMASI::MissionCommand.i, zone : CMASI::Polygon.i) : bool =
        forall waypoint in mission.WaypointList, not WAYPOINT_IN_ZONE_RECTANGLE(waypoint, zone);

    -- Assumes rectangle that is defined by two corners so it is aligned
    -- with the origin (not rotated in space)
    -- Assumes that the altitude is the same in all the coordinates
    -- Assmes zone[0] is the bottom left corner and zone[2] in the upper right corner
    fun WAYPOINT_IN_ZONE_RECTANGLE(waypoint : CMASI::Waypoint.i, zone : CMASI::Polygon.i) : bool =
        (waypoint.Latitude >= (zone.BoundaryPointsList[0]).Latitude)
        and (waypoint.Latitude <= (zone.BoundaryPointsList[1]).Latitude)
        and (waypoint.Longitude >= (zone.BoundaryPointsList[0]).Longitude)
        and (waypoint.Longitude <= (zone.BoundaryPointsList[1]).Longitude)
        and (waypoint.Altitude >= (zone.BoundaryPointsList[0]).Altitude)
        and (waypoint.Altitude <= (zone.BoundaryPointsList[1]).Altitude);

    fun DUPLICATES_IN_MISSION(mission : CMASI::MissionCommand.i) : bool =
        exists waypoint in mission.WaypointList,
           not IS_LAST_WAYPOINT(waypoint) and IS_DUPLICATE(mission, waypoint) ;

    fun IS_LAST_WAYPOINT(waypoint : CMASI::Waypoint.i) : bool =
        (waypoint.Number = waypoint.NextWaypoint);

    -- Checking if there exists a waypoint with the same lat,long,alt as a given waypoint
    -- with the restriction that it follows immediately after the given waypoint in the
    -- linked-list of waypoints.
    fun IS_DUPLICATE(mission : CMASI::MissionCommand.i, waypoint : CMASI::Waypoint.i) : bool =
        exists wp in mission.WaypointList,
            not IS_LAST_WAYPOINT(wp)
            and wp.Number = waypoint.NextWaypoint
            and wp.Latitude = waypoint.Latitude
            and wp.Longitude = waypoint.Longitude
            and wp.Altitude = waypoint.Altitude;
    
    fun WELL_FORMED_MISSION_COMMAND(msg : CMASI::MissionCommand.i) : bool = 
        (forall waypoint in msg.WaypointList, WELL_FORMED_WAYPOINT(waypoint)) and
        msg.FirstWaypoint > 0 and msg.FirstWaypoint <= 200;
        
    fun WELL_FORMED_AIR_VEHICLE_STATE(msg : CMASI::AirVehicleState.i) : bool =
        true;
    
    fun IS_EQUAL(lop : CMASI::Address.i, rop : CMASI::Address.i) : bool = 
        (forall i in indices(lop.value), lop.value[i] = rop.value[i]);
    
    fun IS_TRUSTED(ids : CMASI::AddressArray.i, srcid : CMASI::Address.i) : bool = 
        (exists id in ids.value, IS_EQUAL(srcid, id));

    fun IS_SUBSET_OF_LOCATIONS(lop : PointListArray, rop : CMASI::MissionCommand.i) : bool =
        (forall i in lop, (exists j in rop.WaypointList, IS_EQUAL_LOCATION(i, j)));

    fun IS_EQUAL_LOCATION(lop : CMASI::Location3D.i, rop : CMASI::Waypoint.i) : bool =
        (     lop.Latitude = rop.Latitude
          and lop.Longitude = rop.Longitude
          and lop.Altitude = rop.Altitude
        );
    **};
end CASEAgree;
